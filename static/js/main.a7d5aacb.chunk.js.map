{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","coinStack","topValue","totalValue","popStack","bind","pushStack","this","i","reduce","a","b","find","coin","undefined","setState","event","pushValue","Number","target","value","className","id","map","coinValue","index","key","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPA6FeA,G,wDAzFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,UAAW,CAAC,EAAG,EAAG,EAAG,EAAG,GACxBC,SAAU,EACVC,WAAY,GAGd,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAVA,E,uDAiBjB,IAHA,IAAIJ,EAAYM,KAAKP,MAAMC,UAEvBO,EAAI,EACDA,EAAI,GACY,IAAjBP,EAAUO,IACZP,EAAUO,GAAK,EACfA,EAAI,GAEJA,IAIJ,IAAIL,EAAaF,EAAUQ,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAC/CT,EAAWD,EAAUW,MAAK,SAAAC,GAAI,OAAa,IAATA,UAErBC,IAAbZ,IACFA,EAAW,GAGbK,KAAKQ,SAAS,CACZd,UAAWA,EACXE,WAAYA,EACZD,SAAUA,M,gCAIJc,GAKR,IAJA,IAAMC,EAAYC,OAAOF,EAAMG,OAAOC,OAClCnB,EAAYM,KAAKP,MAAMC,UAEvBO,EAAI,EACDA,GAAK,GACW,IAAjBP,EAAUO,IACZP,EAAUO,GAAKS,EACfT,GAAK,GAELA,IAIJ,IAAIL,EAAaF,EAAUQ,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAC/CT,EAAWD,EAAUW,MAAK,SAAAC,GAAI,OAAa,IAATA,KAEtCN,KAAKQ,SAAS,CACZd,UAAWA,EACXE,WAAYA,EACZD,SAAUA,M,+BAKZ,OACE,yBAAKmB,UAAU,OACb,+CACA,gEAAsCd,KAAKP,MAAMG,YAAc,IAAM,IAAMI,KAAKP,MAAMG,WAAa,IAAMI,KAAKP,MAAMG,WAAa,KACjI,4DAAkCI,KAAKP,MAAME,UAAY,IAAM,IAAMK,KAAKP,MAAME,SAAW,IAAMK,KAAKP,MAAME,SAAW,KACvH,wBAAIoB,GAAG,cACJf,KAAKP,MAAMC,UAAUsB,KAAI,SAACC,EAAWC,GAAZ,OACxB,wBAAIC,IAAKD,GAAQD,GAAa,IAAM,IAAMA,EAAY,IAAMA,EAAY,SAG5E,4BAAQG,QAASpB,KAAKH,UAAtB,OACA,yBAAKiB,UAAU,gBACb,4BAAQM,QAASpB,KAAKD,UAAWc,MAAO,GAAxC,WACA,4BAAQO,QAASpB,KAAKD,UAAWc,MAAO,IAAxC,YACA,4BAAQO,QAASpB,KAAKD,UAAWc,MAAO,IAAxC,YACA,4BAAQO,QAASpB,KAAKD,UAAWc,MAAO,IAAxC,YACA,4BAAQO,QAASpB,KAAKD,UAAWc,MAAO,KAAxC,WACA,4BAAQO,QAASpB,KAAKD,UAAWc,MAAO,KAAxC,iB,GAnFQQ,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a7d5aacb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      coinStack: [0, 0, 0, 0, 0],\n      topValue: 0,\n      totalValue: 0\n    };\n\n    this.popStack = this.popStack.bind(this);\n    this.pushStack = this.pushStack.bind(this);\n  }\n\n  popStack() {\n    let coinStack = this.state.coinStack;\n    \n    let i = 0;\n    while (i < 5) {\n      if (coinStack[i] !== 0) {\n        coinStack[i] = 0;\n        i = 5;\n      } else {\n        i++;\n      }\n    }\n\n    let totalValue = coinStack.reduce((a, b) => a + b, 0);\n    let topValue = coinStack.find(coin => coin !== 0);\n\n    if (topValue === undefined) {\n      topValue = 0;\n    }\n\n    this.setState({\n      coinStack: coinStack,\n      totalValue: totalValue,\n      topValue: topValue\n    });\n  }\n\n  pushStack(event) {\n    const pushValue = Number(event.target.value);\n    let coinStack = this.state.coinStack;\n\n    let i = 4;\n    while (i >= 0) {\n      if (coinStack[i] === 0) {\n        coinStack[i] = pushValue;\n        i = -1;\n      } else {\n        i--;\n      }\n    }\n\n    let totalValue = coinStack.reduce((a, b) => a + b, 0);\n    let topValue = coinStack.find(coin => coin !== 0);\n\n    this.setState({\n      coinStack: coinStack,\n      totalValue: totalValue,\n      topValue: topValue\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Stack Simulator</h1>\n        <p>Total value of the coin stack is: {this.state.totalValue >= 100 ? \"$\" + this.state.totalValue / 100 : this.state.totalValue + \"c\"}</p>\n        <p>The value of the top coin is: {this.state.topValue >= 100 ? \"$\" + this.state.topValue / 100 : this.state.topValue + \"c\"}</p>\n        <ol id=\"coin-stack\">\n          {this.state.coinStack.map((coinValue, index) => \n            <li key={index}>{coinValue >= 100 ? \"$\" + coinValue / 100 : coinValue + \"c\"}</li>\n          )}\n        </ol>\n        <button onClick={this.popStack}>Pop</button>\n        <div className=\"push-buttons\">\n          <button onClick={this.pushStack} value={5} >Push 5c</button>\n          <button onClick={this.pushStack} value={10} >Push 10c</button>\n          <button onClick={this.pushStack} value={20} >Push 20c</button>\n          <button onClick={this.pushStack} value={50} >Push 50c</button>\n          <button onClick={this.pushStack} value={100} >Push $1</button>\n          <button onClick={this.pushStack} value={200} >Push $2</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}